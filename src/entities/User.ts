import { Entity, PrimaryKey, Property } from "@mikro-orm/core";
//we need to create a post resolver, and it would be great to use this
//schema for that too (except for mikro-orm postgres).
import { ObjectType, Field } from "type-graphql";

@ObjectType()
@Entity() //new db tabale
export class User {
  //to make this a valid filed to query or mutate with graphql,
  //idiely would infer the type, in some cases need explicide type
  @Field()
  @PrimaryKey() //primary key - autoincrement id generated by postgres
  id!: number;

  @Field(() => String)
  @Property({ type: "date" }) //tabale column
  createdAt = new Date();

  @Field(() => String)
  @Property({ type: "date", onUpdate: () => new Date() })
  updatedAt = new Date();

  @Field()
  @Property({ type: "text", unique: true })
  username!: string;

  //@Field() - we don't want to expose the password to the client, no need to set type-graphql here
  @Property({ type: "text" })
  password!: string;
}
